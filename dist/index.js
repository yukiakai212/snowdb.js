import v from"path";import B from"path";import{loadBinding as w}from"@node-rs/helper";import{findUp as U}from"@yukiakai/find-up";import{dirname as y}from"vanipath";var a={name:"snowdb",version:"1.0.2",description:"SnowDB \u2013 A lightweight, append-only key\u2013value store optimized for speed and simplicity",main:"./dist/index.cjs",type:"module",module:"./dist/index.js",types:"./dist/index.d.ts",exports:{types:"./dist/index.d.ts",require:"./dist/index.cjs",import:"./dist/index.js"},os:["linux","win32"],cpu:["x64","arm64"],napi:{binaryName:"snowdb"},releaseBinary:"bin",scripts:{test:"npm run build && npx vitest run --reporter verbose --coverage","test:release":"npx vitest run --reporter verbose --coverage && npm run test:sandbox","test:sandbox":"npx sandbox && npx tsx ./__tests__/sandbox.ts",format:"prettier --write **/*.{js,ts} && cargo fmt","format:check":"prettier --check **/*.{js,ts} && cargo fmt --check",lint:"eslint src/**/*.ts","lint:fix":"eslint src/**/*.ts --fix",release:"npm run build:release && npm run build:ts",build:"npx napi build --platform --package-json-path package.json -o bin && tsup","build:ts":"npx tsup","build:release":"npx napi build --release --platform --package-json-path package.json -o bin --target",docs:"npx typedoc"},files:["dist/*","bin/*","CHANGELOG.md"],keywords:["db","snowdb","database","lite","hashmap"],author:"Yuki_akai",homepage:"https://github.com/yukiakai212/snowdb.js",engines:{node:">= 16"},maintainers:[{name:"Yuki_akai",homepage:"https://github.com/yukiakai212"}],repository:{type:"git",url:"git+https://github.com/yukiakai212/snowdb.js.git"},bugs:{url:"https://github.com/yukiakai212/snowdb.js/issues"},license:"MIT",devDependencies:{"@changesets/cli":"^2.29.5","@eslint/js":"^9.32.0","@napi-rs/cli":"^3.1.3","@vitest/coverage-v8":"^3.2.4",dotenv:"^17.2.1",eslint:"^9.32.0","pkg-sandbox":"^1.0.1",prettier:"^3.6.2",tsup:"^8.5.0",tsx:"^4.20.3",typedoc:"^0.28.10",typescript:"^5.9.2","typescript-eslint":"^8.39.0",vitest:"^3.2.4"},dependencies:{"@node-rs/helper":"^1.6.0","@yukiakai/find-up":"^1.1.5",vanipath:"^1.0.7"}};var c=y();if(!c)throw new Error("Module file not found");var m=U("package.json",{basedir:c});if(!m)throw new Error("Package file not found");var n=w(B.join(m,a.releaseBinary),a.napi.binaryName,a.name);var h={STRING:"string",BUFFER:"buffer",OBJECT:"object"},p=class{constructor(e,t,s){this.name=e;this.db=t;this.parser=s}parseResult(e){let t={data:null,deleted:e[0]};if(this.parser===h.STRING)t.data=e[1].toString();else if(this.parser===h.OBJECT)t.data=e[1].length>0?JSON.parse(e[1].toString("utf8")):null;else if(this.parser===h.BUFFER)t.data=e[1];else throw new Error("Unknow ParserType: "+this.parser);return t}toBuffer(e){return Buffer.isBuffer(e)?e:typeof e=="string"?Buffer.from(e,"utf-8"):Buffer.from(JSON.stringify(e))}last(e){let t=n.dbGetLast(this.db.pathDB,this.name,e),s=this.parseResult(t);return s.deleted?null:s.data}save(e,t){return n.dbSet(this.db.pathDB,this.name,e,this.toBuffer(t))}delete(e){return n.dbDelete(this.db.pathDB,this.name,e)}versions(e,t,s){let r=[];return n.dbGetVersions(this.db.pathDB,this.name,e,t,s,(o,i)=>{try{r.push(this.parseResult([o,i]))}catch(l){throw l}}),r}versionsStream(e,t,s,r){n.dbGetVersions(this.db.pathDB,this.name,e,t,s,(o,i)=>{let l=this.parseResult([o,i]);r(o,l.data)})}all(e){let t=[];return n.dbGetAllVersions(this.db.pathDB,this.name,e,(s,r)=>{try{t.push(this.parseResult([s,r]))}catch(o){throw o}}),t}allStream(e,t){n.dbGetAllVersions(this.db.pathDB,this.name,e,(s,r)=>{let o=this.parseResult([s,r]);t(s,o.data)})}collect(e,t,s){n.dbCollect(this.db.pathDB,this.name,e,t,(r,o)=>{let i=this.parseResult([r,o]);s(r,i.data)})}for(e){return{last:()=>this.last(e),save:t=>this.save(e,t),delete:()=>this.delete(e),all:()=>this.all(e),allStream:t=>this.allStream(e,t),versions:(t,s)=>this.versions(e,t,s),versionsStream:(t,s,r)=>this.versionsStream(e,t,s,r)}}};var b=class{constructor(e,t=1e3){this.mergeThreshold=t;return this.pathDB=v.resolve(e),this}connect(){return n.createDb(this.pathDB,this.mergeThreshold),this}document(e,t){return new p(e,this,t)}};export{p as Document,b as SnowDB,h as SnowDBParser};
