"use strict";var D=Object.create;var l=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var x=(n,e)=>{for(var t in e)l(n,t,{get:e[t],enumerable:!0})},b=(n,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of v(e))!S.call(n,r)&&r!==t&&l(n,r,{get:()=>e[r],enumerable:!(s=k(e,r))||s.enumerable});return n};var f=(n,e,t)=>(t=n!=null?D(T(n)):{},b(e||!n||!n.__esModule?l(t,"default",{value:n,enumerable:!0}):t,n)),j=n=>b(l({},"__esModule",{value:!0}),n);var G={};x(G,{Document:()=>p,SnowDB:()=>m,SnowDBParser:()=>d});module.exports=j(G);var y=f(require("path"),1);var B=f(require("path"),1),g=require("@node-rs/helper"),w=require("@yukiakai/find-up");var u={name:"snowdb",version:"1.0.0",description:"SnowDB \u2013 A lightweight, append-only key\u2013value store optimized for speed and simplicity",main:"./dist/index.cjs",type:"module",module:"./dist/index.js",types:"./dist/index.d.ts",exports:{types:"./dist/index.d.ts",require:"./dist/index.cjs",import:"./dist/index.js"},os:["linux","win32"],cpu:["x64"],napi:{binaryName:"snowdb"},releaseBinary:"bin",scripts:{test:"npm run build && npx vitest run --reporter verbose --coverage",format:"prettier --write **/*.{js,ts} && cargo fmt","format:check":"prettier --check **/*.{js,ts} && cargo fmt --check",lint:"eslint src/**/*.ts","lint:fix":"eslint src/**/*.ts --fix",release:"npm run build:release && node publish.js",build:"npx napi build --platform --package-json-path package.json -o bin && tsup","build:release":"npx napi build --release --platform --package-json-path package.json -o bin && tsup",docs:"npx typedoc ./src/index.ts"},files:["dist/*","bin/*","CHANGELOG.md"],keywords:["db","snowdb","database","lite","hashmap"],author:"Yuki_akai",homepage:"https://github.com/yukiakai212/snowdb.js",engines:{node:">= 16"},maintainers:[{name:"Yuki_akai",homepage:"https://github.com/yukiakai212"}],repository:{type:"git",url:"git+https://github.com/yukiakai212/snowdb.js.git"},bugs:{url:"https://github.com/yukiakai212/snowdb.js/issues"},license:"MIT",devDependencies:{"@changesets/cli":"^2.29.5","@eslint/js":"^9.32.0","@napi-rs/cli":"^3.1.3","@vitest/coverage-v8":"^3.2.4",dotenv:"^17.2.1",eslint:"^9.32.0","pkg-sandbox":"^1.0.1",prettier:"^3.6.2",tsup:"^8.5.0",tsx:"^4.20.3",typedoc:"^0.28.10",typescript:"^5.9.2","typescript-eslint":"^8.39.0",vitest:"^3.2.4"},dependencies:{"@node-rs/helper":"^1.6.0","@yukiakai/find-up":"^1.1.5"}};var U=(0,w.findUp)("package.json");if(!U)throw new Error("Package file not found");var i=(0,g.loadBinding)(B.default.join(U,u.releaseBinary),u.napi.binaryName,u.name);var d={STRING:"string",BUFFER:"buffer",OBJECT:"object"},p=class{constructor(e,t,s){this.name=e;this.db=t;this.parser=s}parseResult(e){let t={data:null,deleted:e[0]};if(this.parser===d.STRING)t.data=e[1].toString();else if(this.parser===d.OBJECT)t.data=e[1].length>0?JSON.parse(e[1].toString("utf8")):null;else if(this.parser===d.BUFFER)t.data=e[1];else throw new Error("Unknow ParserType: "+this.parser);return t}toBuffer(e){return Buffer.isBuffer(e)?e:typeof e=="string"?Buffer.from(e,"utf-8"):Buffer.from(JSON.stringify(e))}last(e){let t=i.dbGetLast(this.db.pathDB,this.name,e),s=this.parseResult(t);return s.deleted?null:s.data}save(e,t){return i.dbSet(this.db.pathDB,this.name,e,this.toBuffer(t))}delete(e){return i.dbDelete(this.db.pathDB,this.name,e)}versions(e,t,s){let r=[];return i.dbGetVersions(this.db.pathDB,this.name,e,t,s,(o,a)=>{try{r.push(this.parseResult([o,a]))}catch(h){throw h}}),r}versionsStream(e,t,s,r){i.dbGetVersions(this.db.pathDB,this.name,e,t,s,(o,a)=>{let h=this.parseResult([o,a]);r(o,h.data)})}all(e){let t=[];return i.dbGetAllVersions(this.db.pathDB,this.name,e,(s,r)=>{try{t.push(this.parseResult([s,r]))}catch(o){throw o}}),t}allStream(e,t){i.dbGetAllVersions(this.db.pathDB,this.name,e,(s,r)=>{let o=this.parseResult([s,r]);t(s,o.data)})}collect(e,t,s){i.dbCollect(this.db.pathDB,this.name,e,t,(r,o)=>{let a=this.parseResult([r,o]);s(r,a.data)})}for(e){return{last:()=>this.last(e),save:t=>this.save(e,t),delete:()=>this.delete(e),all:()=>this.all(e),allStream:t=>this.allStream(e,t),versions:(t,s)=>this.versions(e,t,s),versionsStream:(t,s,r)=>this.versionsStream(e,t,s,r)}}};var m=class{constructor(e,t=1e3){this.mergeThreshold=t;return this.pathDB=y.default.resolve(e),this}connect(){return i.createDb(this.pathDB,this.mergeThreshold),this}document(e,t){return new p(e,this,t)}};0&&(module.exports={Document,SnowDB,SnowDBParser});
